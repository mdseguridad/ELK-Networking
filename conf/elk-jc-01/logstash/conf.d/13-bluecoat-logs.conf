filter {
  if [type] == "bluecoat" {
                if ([message] =~ /^#/) {
                  drop{}
                }
    csv {
        columns => [ "date", "time", "event.duration", "source.ip", "http.response.status_code", "bluecoat.action", "http.response.body.bytes", "http.request.body.bytes", "http.request.method", "url.scheme", "destination.address", "url.full", "user.name", "s-supplier-name", "bluecoat.content_type", "cs(User-Agent)", "bluecoat.result", "bluecoat.category","bluecoat.x_virus_id", "host.ip", "perfil", "destination.ip"]
        separator => " "
    }
    if [date] and [time] {
        mutate { 
                merge => ["date", "time"] 
        }   # merge and join need to be in 2 separate mutates
        mutate { 
                join => ["date", " "] 
        }       # merge and join need to be in 2 separate mutates
        date { 
                match => ["date", "YYYY-MM-dd HH:mm:ss" ] 
                timezone => "UTC"
                target => "@timestamp"
        } 
    }
    # Resolvemos la IP si hace falta
    if (![destination.ip] or [destination.ip] == "-") {
      if ([destination.address] and [destination.address] != "-") { 
         mutate {
           copy => {"destination.address" => "destination.ip"}
         }
         if [destination.ip] =~ "(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]" {
           dns {
             resolve => ["destination.ip"]
             action => "replace"
             hit_cache_size => 50000
             hit_cache_ttl => 720
             failed_cache_size => 1000
             failed_cache_ttl => 360
             nameserver => ["172.22.253.10", "172.22.253.140", "8.8.8.8", "8.8.4.4"]
             timeout =>0.5 #Just to make sure timeout is not the problem here
           }
         }
      }
    } #Fin de resolucion de la IP
    # Resolvemos el host
     if ([host.ip] and [host.ip] != "-") {
      translate {
        field => "host.ip"
        destination => "host.name"
        dictionary => {
          "172.22.96.171" => "px-bc3c-01"
          "172.22.96.172" => "px-bc3c-02"
          "172.22.96.173" => "px-bc3c-03"
          "172.22.96.174" => "px-bc3c-04"
          "172.22.96.175" => "px-bc3c-05"
          "172.22.96.176" => "px-3600-01"
          "172.22.96.177" => "px-3600-02"
          "172.22.96.178" => "px-3600-03"
          "172.22.204.21" => "px-bcjc-01"
          "172.22.204.22" => "px-bcjc-02"
          "172.22.204.23" => "px-bcjc-03"
          "172.22.204.24" => "px-bcjc-04"
          "172.22.204.25" => "px-bcjc-05"
          "172.22.204.26" => "px-2978-01"
          "172.22.204.27" => "px-2978-02"
          "172.22.204.28" => "px-2978-03"

    }
  }
    }
    # Datos geo del destino
   if [destination.ip] and [destination.ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "destination.ip"
                target => "destination.geo"
            }

            # Delete 0,0 in destination.geo.location if equal to 0,0
            if ([destination.geo.location] and [destination.geo.location] =~ "0,0") {
                mutate {
                    replace => [ "destination.geo.location", "" ]
                }
            }
     }
    # Tratamiento del perfil
    mutate {
      copy => {"perfil" => "user.group.name"}
    }
    if ([perfil] != "-") {
      if "homePhone" in [perfil] {
          mutate {
              split => ["perfil", "=="]
              add_field => {"user.group.id" => "%{[perfil][1]}"}
          }
       }
       else {
         grok {
           match => { "perfil" => "[p,P]erfil(?<user.group.id>[0-9]+\w*)" }
        }
       }
    }    
    # Conversion de tipos de datos
    mutate {
        convert => ["http.response.body.bytes", "integer",
        "event.duration", "integer",
        "http.request.body.bytes", "integer"]
    }
    # Duplicado de campos para compatibilidad
    mutate{
      copy => { 
        "http.request.body.bytes" => "source.bytes"
        "destination.address" => "url.domain"
        "user.name" => "source.user.full_name"
        "user.group.name" => "source.user.group.name"
        "user.group.id" => "source.user.group.id"
        "http.response.body.bytes" => "destination.bytes"
      }
    }
    # Preparamos los campos User Agent
    if [cs(User-Agent)] != "" {
        useragent { source => "cs(User-Agent)" prefix => "user_agent." }
    }
    mutate {
      rename => ["cs(User-Agent)", "user_agent.original"]
    }
    mutate {
      rename => { "message" => "event.original" }
    }
    # Borramos campos no necesarios
    mutate {
        remove_field => ["host", "date", "time", "gmttime", "localtime",
         "raw_message",  "s-supplier-name", "perfil", "port"]
    }
  }#endif
}
