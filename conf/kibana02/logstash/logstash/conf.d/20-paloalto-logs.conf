filter {
  if "panw-log" in [tags] {
     # Quitamos las cabeceras
#     grok {
#       match => [ "message", "%{TIMESTAMP_ISO8601}%{SPACE}%{HOSTNAME:realhost}%{SPACE}%{GREEDYDATA:raw_message}"] 
#     }
#     mutate {
#       replace => { "message" => "%{raw_message}"}
#     }
     # Partimos los campos para Traffic
     if ([message] =~ /,TRAFFIC,/) {
       csv {
         source => "message"
         autogenerate_column_names => "false"
         columns => [ 
           "future_use_1", # Index 1
           "event.created", # Index 2
           "observer.serial_number", # Index 3
           "panw.panos.message_type", # Index 4
           "panw.panos.message_subtype", # Index 5
           "panw.panos.config_version", # Index 6
           "panw.panos.generated_time", # Index 7
           "client.ip", # Index 8
           "server.ip", # Index 9
           "client.nat.ip", # Index 10
           "server.nat.ip", # Index 11
           "panw.panos.ruleset", # Index 12
           "client.user.name", # Index 13
           "server.user.name", # Index 14
           "network.application", # Index 15
           "panw.panos.virtual_system",  # Index 16
           "panw.panos.source.zone", # Index 17
           "panw.panos.destination.zone", # Index 18
           "panw.panos.source.interface", # Index 19
           "panw.panos.destination.interface",  # Index 20
           "panw.panos.log_action", # Index 21
           "panw.panos.time_logged", # Index 22
           "panw.panos.flow_id", # Index 23
           "panw.panos.repeat_count", # Index 24
           "client.port", # Index 25
           "server.port", # Index 26
           "client.nat.port", # Index 27
           "server.nat.port", # Index 28
           "panw.panos.labels", # Index 29
           "network.transport", # Index 30
           "event.action", # Index 31
           "network.bytes", # Index 32
           "client.bytes", # Index 33
           "server.bytes", # Index 34
           "network.packets", # Index 35
           "event.start", # Index 36
           "event.duration", # Index 37
           "panw.panos.url.category", # Index 38
           "panw.panos.padding", # Index 39
           "panw.panos.sequence_number", # Index 40
           "panw.panos.action_flags", # Index 41
           "source.geo.country_iso_code", # Index 42
           "destination.geo.country_iso_code", # Index 43
           "panw.panos.cpadding", # Index 44
           "server.packets", # Index 45
           "client.packets", # Index 46
           "panw.panos.session_end_reason", # Index 47 
           "panw.panos.dg_hier_level_1", # Index 48
           "panw.panos.dg_hier_level_2", # Index 49
           "panw.panos.dg_hier_level_3", # Index 50
           "panw.panos.dg_hier_level_4", # Index 51
           "panw.panos.vsys_name", # Index 52
           "observer.hostname",  # Index 53
           "panw.panos.action_source" # Index 54
         ]
       }
      # Conversion de campos
      mutate {
        convert => {
          "panw.panos.flow_id" => "integer"
          "panw.panos.repeat_count" => "integer"
           "client.port" => "integer"
           "server.port" => "integer"
           "client.nat.port" => "integer"
           "server.nat.port"=> "integer"
           "network.bytes" => "integer"
           "client.bytes" => "integer"
           "server.bytes" => "integer"
           "network.packets" => "integer"
           "panw.panos.sequence_number" => "integer"
           "server.packets" => "integer"
           "client.packets" => "integer" 
        }
      }
      # Procesado del usuario
      mutate {
        lowercase => ["client.user.name", "server.user.name"]
      }
      mutate {
        gsub => [
          "client.user.name",".*[\\]","" ,
          "server.user.name",".*[\\]",""
        ]
      }

      mutate {
        copy => { 
         "client.ip" => "source.ip"
         "server.ip" => "destination.ip"
         "server.nat.ip" => "destination.nat.ip"
         "client.nat.ip" => "source.nat.ip"
         "client.user.name" => "source.user.name"
         "server.user.name" => "destination.user.name"
         "client.bytes" => "source.bytes"
         "server.bytes" => "destination.bytes"
         "client.port" => "source.port"
         "client.nat.port" => "source.nat.port"
         "server.port" => "destination.port"
         "server.nat.port" => "destination.nat.port"
         "server.packets" => "destination.packets"
         "client.packets" => "source.packets"
        }
      }
       mutate {
        copy => { 
         "client.ip" => "source.address"
         "server.ip" => "destination.address"
         "client.user.name" => "user.name"
        }
      }
      mutate {
        add_tag => "panw-traffic-log"
      }
      # Limpieza de campos
      mutate {
        remove_field => ["future_use_1"]
      }
     } # fin if TRAFFIC
     # Partimos los campos para THREAT
     if ([message] =~ /,THREAT,/) {
         csv {
         source => "message"
         autogenerate_column_names => "false"
         columns => [ 
           "future_use_1", # Index 1
           "event.created", # Index 2
           "observer.serial_number", # Index 3
           "panw.panos.message_type", # Index 4
           "panw.panos.message_subtype", # Index 5
           "panw.panos.config_version", # Index 6
           "panw.panos.generated_time",  # Index 7
           "client.ip", # Index 8
           "server.ip", # Index 9
           "client.nat.ip",  # Index 10
           "server.nat.ip",  # Index 11
           "panw.panos.ruleset",  # Index 12
           "client.user.name",  # Index 13
           "server.user.name",  # Index 14
           "network.application",  # Index 15
           "panw.panos.virtual_system",  # Index 16
           "panw.panos.source.zone",  # Index 17
           "panw.panos.destination.zone",  # Index 18 
           "panw.panos.source.interface",  # Index 19
           "panw.panos.destination.interface",  # Index 20
           "panw.panos.log_forwarding_profile",  # Index 21
           "future_use_2",  # Index 22
           "panw.panos.flow_id",  # Index 23
           "panw.panos.repeat_count",  # Index 24
           "client.port",  # Index 25
           "server.port",  # Index 26
           "client.nat.port",  # Index 27
           "server.nat.port",  # Index 28
           "panw.panos.labels",  # Index 29
           "network.transport",  # Index 30
           "event.action",  # Index 31
           "panw.panos.threat.resource",  # Index 32
           "panw.panos.threat.name",  # Index 33 
           "panw.panos.url.category",  # Index 34
           "event.severity",  # Index 35
           "panw.panos.direction",  # Index 36
           "panw.panos.sequence_number",  # Index 37
           "panw.panos.action_flags",  # Index 38
           "source.geo.country_iso_code",  # Index 39
           "destination.geo.country_iso_code",  # Index 40
           "future_use_3",  # Index 41
           "panw.panos.content_type",  # Index 42
           "panw.panos.network.pcap_id",  # Index 43
           "panw.panos.file.hash",  # Index 44 
           "panw.panos.cloud",  # Index 45
           "panw.panos.url_index",  # Index 46
           "user_agent.original",  # Index 47
           "file.type",  # Index 48
           "network.forwarded_ip",  # Index 49
           "http.request.referer",  # Index 50
           "source.user.email",  # Index 51
           "panw.panos.subject",  # Index 52
           "destination.user.email",  # Index 53
           "panw.panos.report_id",  # Index 54
           "panw.panos.dg_hier_level_1",  # Index 55
           "panw.panos.dg_hier_level_2",  # Index 56
           "panw.panos.dg_hier_level_3",  # Index 57
           "panw.panos.dg_hier_level_1",  # Index 58
           "panw.panos.virtual_system_name",  # Index 59
           "observer.hostname",  # Index 60
           "panw.panos.device_name", # Index 61
           "future_use_4", # Index 62
           "panw.panos.source_vmuuid", # Index 63
           "panw.panos.destination_vmuuid", # Index 64
           "panw.panos.http_method", # Index 65
           "panw.panos.tunnelid_imsi", # Index 66
           "panw.panos.monitor_tag_imei", # Index 67
           "panw.panos.parent_session_id", # Index 68
           "panw.panos.parent_start_time", # Index 69
           "panw.panos.tunnel_type", # Index 70
           "panw.panos.threat_category", # Index 71
           "panw.panos.content_version", # Index 72
           "future_use_5" # Index 73
          ]
       }
     # Procesado del usuario
      mutate {
        lowercase => ["client.user.name", "server.user.name"]
      }
      mutate {
        gsub => [
          "client.user.name",".*[\\]","" ,
          "server.user.name",".*[\\]",""
        ]
      }

      # Duplicado de campos
      mutate {
        convert => {
          "panw.panos.flow_id" => "integer"
          "panw.panos.repeat_count" => "integer"
           "client.port" => "integer"
           "server.port" => "integer"
           "client.nat.port" => "integer"
           "server.nat.port"=> "integer"
           "panw.panos.sequence_number" => "integer"
        }
      }

      mutate {
        copy => {
         "client.ip" => "source.ip"
         "server.ip" => "destination.ip"
         "client.nat.ip" => "source.nat.ip"
         "server.nat.ip" => "destination.nat.ip"
         "client.user.name" => "source.user.name"
         "server.user.name" => "destination.user.name"
         "client.port" => "source.port"
         "server.port" => "destination.port"
         "panw.panos.threat.resource" => "url.original"
        }
      }
       mutate {
        copy => {
         "client.ip" => "source.address"
         "server.ip" => "destination.address"
         "client.user.name" => "user.name"
        }
      }
      mutate {
        add_tag => "panw-traffic-log"
      }
  } # fin if THREAT
  # Partimos los campos para CONFIG
  if ([message] =~ /,CONFIG,/) {
    csv {
      source => "message"
         autogenerate_column_names => "false"
         columns => [
          "future_use_1", 
          "event.created", 
          "observer.serial_number", 
          "panw.panos.message_type", 
          "panw.panos.message_subtype", 
          "future_use_2", 
          "panw.panos.generated_time", 
          "panw.panos.host",
          "panw.panos.virtual_system", 
          "panw.panos.commad", 
          "user.name", 
          "panw.panos.client", 
          "panw.panos.result", 
          "panw.panos.configuration_path", 
          "panw.panos.before_change_detail",
          "panw.panos.after_change_detail", 
          "panw.panos.sequence_number", 
          "panw.panos.action_flags", 
          "panw.panos.dg_hier_level_1",
          "panw.panos.dg_hier_level_2", 
          "panw.panos.dg_hier_level_3", 
          "panw.panos.dg_hier_level_4", 
          "panw.panos.vsys_name", 
          "observer.hostname"
         ]
      } # fin del csv
      mutate {
        add_tag => "panw-system-log"
      }
  } #fin de if CONFIG
  # Partimos los campos para SYSTEM
  if ([message] =~ /,SYSTEM,/) {
       csv {
         source => "message"
         autogenerate_column_names => "false"
         columns => [
           "future_use_1", 
           "event.created", 
           "observer.serial_number", 
           "panw.panos.message_type", 
           "event.category",
           "future_use_2",
           "panw.panos.generated_time",
           "panw.panos.virtual_system",
           "event.id",
           "panw.panos.object",
           "future_use_3",
           "future_use_4",
           "event.module", 
           "event.severity",
           "event.action",
           "panw.panos.sequence_number",
           "panw.panos.action_flags", 
           "panw.panos.dg_hier_level_1", 
           "panw.panos.dg_hier_level_2", 
           "panw.panos.dg_hier_level_3",
           "panw.panos.dg_hier_level_4",
           "panw.panos.vsys_name", 
           "observer.hostname"
          ] 
       }
       mutate {
        add_tag => "panw-system-log"
      }
  }

  # Partimos los campos para CORRELATION
  if ([message] =~ /,CORRELATION,/) {
       csv {
         source => "message"
         autogenerate_column_names => "false"
         columns => [
           "future_use_1", # Index 1
           "event.created", # Index 2
           "observer.serial_number", # Index 3
           "panw.panos.message_type", # Index 4
           "panw.panos.message_subtype", # Index5
           "future_use_3", # Index 6
           "panw.panos.generated_time", # Index 7
           "client.ip", # Index 8
           "client.user.name",  # Index 9
           "panw.panos.virtual_system", # Index 10
           "event.category", # Index 11
           "event.severity", # Index 12
           "panw.panos.dg_hier_level_1", # Index 13
           "panw.panos.dg_hier_level_2", # Index 14
           "panw.panos.dg_hier_level_3", # Index 15
           "panw.panos.dg_hier_level_4", # Index 16
           "panw.panos.vsys_name", # Index 17
           "observer.hostname", # Index 18
           "panw.panos.vsys_id", # Index 19
           "panw.panos.object_name", # Index 20
           "panw.panos.object_id", # Index 21
           "panw.panos.evidence" # Index 22
          ]
       }
     # Procesado del usuario
      mutate {
        lowercase => ["client.user.name"]
      }
      mutate {
        gsub => [
          "client.user.name",".*[\\]",""
        ]
      }
       mutate {
        copy => {
         "client.ip" => "source.ip"
         "client.user.name" => "source.user.name"
        }
      }
      mutate {
        copy => {
         "client.ip" => "source.address"
         "client.user.name" => "user.name"
        }
      }
      mutate {
        add_tag => "panw-traffic-log"
      }
  } # Fin del CORRELATE
  # Copia de campos generales
  mutate {
    copy => {
      "message" => "event.original"
    }
  }
  # Generamos las horas
  # hora del evento
  date { 
     match => ["panw.panos.generated_time", "YYYY/MM/dd HH:mm:ss" ] 
     timezone => "Europe/Madrid"
     target => "@timestamp"
   } 
  date {
     match => ["event.created", "YYYY/MM/dd HH:mm:ss" ]
     timezone => "Europe/Madrid"
     target => "event.created"
   }
   date {
     match => ["event.start", "YYYY/MM/dd HH:mm:ss" ]
     timezone => "Europe/Madrid"
     target => "event.start"
   }
   date {
     match => ["panw.panos.time_logged", "YYYY/MM/dd HH:mm:ss" ]
     timezone => "Europe/Madrid"
     target => "panw.panos.time_logged"
   }
  # Geolocalizacion y DNS
  # Resolucion del nombre del origen
   if ([source.address] and [source.address] =~ /(?<![0-9])(?:(?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}))(?![0-9])/) {
     dns {
         reverse => ["source.address"]
         action => "replace"
         hit_cache_size => 50000
         hit_cache_ttl => 720
         failed_cache_size => 10000
         failed_cache_ttl => 720
         nameserver => ["172.22.253.140", "172.22.253.10"]
        timeout =>0.5 #Just to make sure timeout is not the problem here
      }
    mutate {
      copy =>{
        "source.address" => "client.address"
      }
    }
   }
   # Resolucion del nombre del origen
   if ([destination.address] and [destination.address] =~ /(?<![0-9])(?:(?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}))(?![0-9])/) {
       dns {
         reverse => ["destination.address"]
         action => "replace"
         hit_cache_size => 50000
         hit_cache_ttl => 720
         failed_cache_size => 10000
         failed_cache_ttl => 720
         nameserver => ["172.22.253.140", "172.22.253.10"]
        timeout =>0.5 #Just to make sure timeout is not the problem here
       }
     mutate {
      copy => {
        "destination.address" => "server.address"
      }
     }
    }
   # Datos geo del destino
   if [destination.ip] and [destination.ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "destination.ip"
                target => "destination.geo"
            }

            # Delete 0,0 in destination.geo.location if equal to 0,0
            if ([destination.geo.location] and [destination.geo.location] =~ "0,0") {
                mutate {
                    replace => [ "destination.geo.location", "" ]
                }
            }
    }
   # Datos geo del origen
   if [source.ip] and [source.ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "source.ip"
                target => "source.geo"
            }

            # Delete 0,0 in source.geo.location if equal to 0,0
            if ([source.geo.location] and [source.geo.location] =~ "0,0") {
                mutate {
                    replace => [ "source.geo.location", "" ]
                }
            }
    }

  # Limpieza de campos
  mutate {
    remove_field => ["message", "raw_message", "panw.panos.generated_time"]
  }
  # Limpieza de future_use
   # Limpieza de campos
   mutate {
     remove_field => ["future_use_1","future_use_2",
                       "future_use_3","future_use_4","future_use_5","port","realhost"
                     ]
   }

  } # Fin if
} # Fin del filter
