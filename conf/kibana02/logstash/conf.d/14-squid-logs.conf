filter {
  if [type] == "squidaccess" {
    mutate {
        remove_field => [ "host"]
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601}%{SPACE}%{IPV4:host.ip}%{SPACE}%{HOSTNAME:host.name}%{SPACE}%{NOTSPACE:logfile}%{SPACE}%{NUMBER:squid.timestamp}%{SPACE}%{NUMBER:event.duration}%{SPACE}%{IPORHOST:source.ip}%{SPACE}%{NOTSPACE:squid.action}/%{NUMBER:http.response.status_code}%{SPACE}%{NUMBER:squid.transfer_size}%{SPACE}%{NOTSPACE:http.request.method}%{SPACE}%{NOTSPACE:url.full}%{SPACE}%{NOTSPACE:user.name}%{SPACE}%{NOTSPACE:squid.peer_code}/%{NOTSPACE:destination.ip}%{SPACE}%{NOTSPACE:squid.content_type}" ]}

   # Proceso el tiempo
   mutate {
        convert => [ "squid.timestamp", "float"]
   }
   date { 
     match => ["squid.timestamp", "UNIX" ] 
     timezone => "UTC"
     target => "@timestamp"
   } 
   # Proceso la url
   grok {
    match => ["url.full","(%{URIPROTO:url.scheme}://)?(?:%{USER:user.name}(?::[^@]*)?@)?(%{IPORHOST:url.domain}(?::%{POSINT:url.port})?)?(%{URIPATHPARAM:url.path})?"]
   }
   if (![url.port] or [url.port] == "-") {
       translate {
        field => "url.schema"
        destination => "url.port"
        dictionary => {
          "http" => "80"
          "https" => "443"
          "ftp" => "21"
        }
      }
   }
    
   # Proceso la IP destino
   if [destination.ip] == "-" {
     mutate {
       copy => {
         "url.domain" => "destination.ip"
       }
     }
     if [destination.ip] =~ "(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]" {
       dns {
         resolve => ["destination.ip"]
         action => "replace"
         hit_cache_size => 50000
         hit_cache_ttl => 720
         failed_cache_size => 1000
         failed_cache_ttl => 360
         nameserver => ["172.22.253.140", "172.22.253.10", "8.8.8.8", "8.8.4.4"]
        timeout =>1.0 #Just to make sure timeout is not the problem here
       }
     }
     else{
       mutate {
         replace => ["destination.ip", ""]
       }
     }
   }

   # Datos geo del destino
   if [destination.ip] and [destination.ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "destination.ip"
                target => "destination.geo"
            }

            # Delete 0,0 in blocked_hostGeo.location if equal to 0,0
            if ([destination.geo.location] and [dstGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "destination.geo.location", "" ]
                }
            }
    }
   # Resolucion del nombre del origen
   if [source.ip] != "-" {
     mutate {
       copy => {
         "source.ip" => "source.address"
       }
     }
       dns {
         reverse => ["source.address"]
         action => "replace"
         hit_cache_size => 50000
         hit_cache_ttl => 720
         failed_cache_size => 1000
         failed_cache_ttl => 360
         nameserver => ["172.22.253.140", "172.22.253.10"]
        timeout =>5.0 #Just to make sure timeout is not the problem here
       }
     }
   # Conversion de tipos
   mutate {
        convert => {
          "event.duration" => "integer"
          "squid.transfer_size" => "integer"
          "url.port" => "integer"
        }
   }
   # Duplicado de campos para compatibilidad
   mutate{
      copy => { 
        "url.domain" => "destination.address"
        "user.name" => "source.user.full_name"
        "source.ip" => "client.ip"
        "url.port" => "destination.port"
        "message" => "event.original"
      }
   }
   mutate{
      copy => {
        "url.port" => "server.port"
        "destination.ip" => "server.ip"
        "squid.transfer_size" => "network.bytes"
      }
   }
   
   # Borramos campos no necesarios
    mutate {
       remove_field => ["message", "logfile"]
    }

  }# end if type
}
