filter {
  if [type] == "squidaccess" {
    grok {
        match => [ "message", "%{TIMESTAMP_ISO8601} %{IPV4:deviceip} %{HOSTNAME:devicename} %{NOTSPACE:logfile} %{NUMBER:timestamp}\s+%{NUMBER:response_time} %{IPORHOST:src_ip} %{NOTSPACE:squid_request_status}/%{NUMBER:http_status_code} %{NUMBER:transfer_size} %{NOTSPACE:http_method} (%{URIPROTO:url_scheme}://)?(?<url_host>\S+?)(:%{INT:url_port})?(/%{NOTSPACE:url_path})?\s+%{NOTSPACE:client_identity}\s+%{NOTSPACE:peer_code}/%{NOTSPACE:peerhost}\s+%{NOTSPACE:content_type}" ]
  }
  mutate {
        convert => [ "response_time", "integer",
        "transfer_size", "integer" ]
        remove_field => ["message"]
  }
   # Proceso la IP del host
   if [peerhost] != "-" {
     mutate {
       copy => {"peerhost" => "url_ip"}
     }
   }
   else {
     mutate {
       copy => {"url_host" => "url_ip"}
     }
     # Chequeo que el nombre del host es coherente antes de resolver DNS
     if [url_ip] =~ "(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]" {
       dns {
         resolve => ["url_ip"]
         action => "replace"
         nameserver => ["8.8.8.8", "8.8.4.4"]
         timeout => 5.0 #Just to make sure timeout is not the problem here
       }
     }
     else{
       mutate {
         replace => ["url_ip", ""]
       }
     }
   }
   # Datos geo del destino
   if [url_ip] and [url_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "url_ip"
                target => "dstGeoip"
            }

            # Delete 0,0 in blocked_hostGeo.location if equal to 0,0
            if ([dstGeo.location] and [dstGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "dstGeo.location", "" ]
                }
            }
     }
 }
}
